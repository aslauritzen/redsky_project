{"version":3,"sources":["util/apiConnection.tsx","models/Users.ts","util/tableState.tsx","components/UserModal.tsx","components/UserList.tsx","components/AddUser.tsx","components/MainAppBar.tsx","App.tsx","index.tsx"],"names":["baseAPIURL","window","location","protocol","hostname","Users","firstName","lastName","email","avatar","id","this","updateLatestID","_latestID","Math","max","incrementID","ForceReload","atom","key","default","UserSelector","selector","get","a","axios","then","response","Object","entries","data","map","entry","catch","error","console","log","UserModal","user","open","handleClose","reload","newUser","React","useState","formData","setFormData","firstNameValid","validFirstName","lastNameValid","validLastName","emailValid","validEmail","firstNameTouched","touchFirstName","lastNameTouched","touchLastName","emailTouched","touchEmail","closeDialog","random","Dialog","onRendered","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","autoComplete","TextField","autoFocus","margin","label","defaultValue","onChange","e","target","value","onFocus","helperText","fullWidth","required","type","indexOf","DialogActions","Button","onClick","color","disabled","post","userData","toast","success","addUser","put","updateUser","useStyles","makeStyles","theme","table","minWidth","UserList","classes","usersData","useRecoilValue","useSetRecoilState","setOpen","emptyUser","currentUser","setCurrentUser","handleClickOpen","Box","m","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","scope","IconButton","delete","deleteUser","edge","editUser","Avatar","alt","src","AddUser","variant","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","AppBar","position","Toolbar","Typography","refreshUsers","App","Suspense","fallback","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAMMA,EAAU,UAAMC,OAAOC,SAASC,SAAtB,aAAmCF,OAAOC,SAASE,SAAnD,a,yJCNKC,E,WAQjB,WAAaC,EAAmBC,EAAkBC,EAAeC,EAAgBC,GAAa,yBAN9FA,QAM6F,OAL7FJ,eAK6F,OAJ7FC,cAI6F,OAH7FC,WAG6F,OAF7FC,YAE6F,EACzFE,KAAKD,GAAKA,EACVC,KAAKL,UAAYA,EACjBK,KAAKJ,SAAWA,EAChBI,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EACdE,KAAKC,iB,kDAGT,WACIP,EAAMQ,UAAYC,KAAKC,IAAIJ,KAAKD,GAAIL,EAAMQ,c,0BAG9C,WACI,OAAOR,EAAMQ,UAAY,I,uBAG7B,WACI,OAAO,IAAIR,EAAM,GAAI,GAAI,GAAI,GAAIM,KAAKK,mB,KA1BzBX,EACVQ,UAAoB,E,6BCKzBb,EAAU,UAAMC,OAAOC,SAASC,SAAtB,aAAmCF,OAAOC,SAASE,SAAnD,aAEVa,EAAcC,YAAK,CACxBC,IAAK,cACLC,QAAS,IAGJC,EAAeC,YAAS,CAC1BH,IAAK,QACLI,IAAI,WAAD,4BAAE,uBAAAC,EAAA,6DAASD,EAAT,EAASA,KACNN,GADH,kBAEMQ,IAAMF,IAAIvB,EAAa,eAAe0B,MAAK,SAACC,GAC/C,OAAOC,OAAOC,QAAQF,EAASG,MAAMC,KAAI,SAACC,GAAD,OAAgB,IAAI3B,EACzD2B,EAAM,GAAG1B,UACT0B,EAAM,GAAGzB,SACTyB,EAAM,GAAGxB,MACTwB,EAAM,GAAGvB,OACTuB,EAAM,GAAGtB,UAEduB,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAXf,2CAAF,mDAAC,K,6ECoHOG,EArHwB,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QACtE,EAAgCC,IAAMC,SAAS,CAAClC,GAAI4B,EAAK5B,GAAIJ,UAAWgC,EAAKhC,UAAWC,SAAU+B,EAAK/B,SAAUC,MAAO8B,EAAK9B,MAAOC,OAAQ6B,EAAK7B,SAAjJ,mBAAOoC,EAAP,KAAiBC,EAAjB,KACA,EAAyCH,IAAMC,UAAUF,GAAzD,mBAAOK,EAAP,KAAuBC,EAAvB,KACA,EAAuCL,IAAMC,UAAUF,GAAvD,mBAAOO,EAAP,KAAsBC,EAAtB,KACA,EAAiCP,IAAMC,UAAUF,GAAjD,mBAAOS,EAAP,KAAmBC,EAAnB,KACA,EAA2CT,IAAMC,UAAUF,GAA3D,mBAAOW,EAAP,KAAyBC,EAAzB,KACA,EAAyCX,IAAMC,UAAUF,GAAzD,mBAAOa,EAAP,KAAwBC,EAAxB,KACA,EAAmCb,IAAMC,UAAUF,GAAnD,mBAAOe,EAAP,KAAqBC,EAArB,KA+BA,SAASC,IACLX,GAAgBN,GAChBQ,GAAeR,GACfU,GAAYV,GACZY,GAAgBZ,GAChBc,GAAed,GACfgB,GAAYhB,GACZD,EAAO3B,KAAK8C,UACZpB,IAGJ,OACI,eAACqB,EAAA,EAAD,CAAQtB,KAAMA,EAAMuB,WAhBxB,WACIhB,EAAY,CAACpC,GAAI4B,EAAK5B,GAAIJ,UAAWgC,EAAKhC,UAAWC,SAAU+B,EAAK/B,SAAUC,MAAO8B,EAAK9B,MAAOC,OAAQ6B,EAAK7B,UAejEsD,QAASJ,EAAaK,kBAAgB,oBAAnF,UACI,cAACC,EAAA,EAAD,CAAavD,GAAG,oBAAhB,SAAqCgC,EAAU,aAAc,gBAC7D,eAACwB,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,yCACgCzB,EAAU,gBAAiB,qBAD3D,sBAGA,uBAAM0B,aAAa,MAAnB,UACI,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACP7D,GAAG,YACH8D,MAAM,aACNC,aAAcnC,EAAKhC,UACnBoE,SAtDpB,SAA0BC,GACtB7B,EAAY,2BAAID,GAAL,IAAevC,UAAWqE,EAAEC,OAAOC,SAC9C7B,IAAiB2B,EAAEC,OAAOC,QAqDVC,QAAS,kBAAMxB,GAAe,IAC9BpB,OAAQa,GAAkBM,EAC1B0B,WAAW,2BACXC,WAAS,EACTC,UAAQ,IAEZ,cAACZ,EAAA,EAAD,CACIE,OAAO,QACP7D,GAAG,WACH8D,MAAM,YACNC,aAAcnC,EAAK/B,SACnBmE,SA7DpB,SAAyBC,GACrB7B,EAAY,2BAAID,GAAL,IAAetC,SAAUoE,EAAEC,OAAOC,SAC7C3B,IAAgByB,EAAEC,OAAOC,QA4DTC,QAAS,kBAAMtB,GAAc,IAC7BtB,OAAQe,GAAiBM,EACzBwB,WAAW,0BACXC,WAAS,EACTC,UAAQ,IAEZ,cAACZ,EAAA,EAAD,CACIE,OAAO,QACP7D,GAAG,QACH8D,MAAM,gBACNU,KAAK,QACLT,aAAcnC,EAAK9B,MACnBkE,SArEpB,SAAsBC,GAClB7B,EAAY,2BAAID,GAAL,IAAerC,MAAOmE,EAAEC,OAAOC,SAC1CzB,IAAauB,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAMM,QAAQ,KAAO,IAoE7CL,QAAS,kBAAMpB,GAAW,IAC1BxB,OAAQiB,GAAcM,EACtBsB,WAAW,+BACXC,WAAS,EACTC,UAAQ,IAEZ,cAACZ,EAAA,EAAD,CACIE,OAAO,QACP7D,GAAG,SACH8D,MAAM,mBACNC,aAAcnC,EAAK7B,OACnBiE,SA5EpB,SAAuBC,GACnB7B,EAAY,2BAAID,GAAL,IAAepC,OAAQkE,EAAEC,OAAOC,UA4E3BG,WAAS,UAIrB,eAACI,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQC,QAAS3B,EAAa4B,MAAM,UAApC,oBAGA,eAACF,EAAA,EAAD,CAAQG,WAAYzC,GAAkBE,GAAiBE,GAAamC,QAjFhF,WACQ5C,EHxBZ,SAAkBJ,EAAWG,GACzBhB,IAAMgE,KAAN,UAAczF,EAAd,eAAuC,CAAC0F,SAAUpD,IAAOZ,MAAK,WAC1DiE,IAAMC,QAAQ,2BACdnD,EAAO3B,KAAK8C,aACb3B,OAAM,SAACC,GACNyD,IAAMzD,MAAM,wBACZC,QAAQD,MAAMA,GACdO,EAAO3B,KAAK8C,aGiBCiC,CAAQhD,EAAUJ,GHbvC,SAAqBH,EAAWG,GAC5BhB,IAAMqE,IAAN,UAAa9F,EAAb,yBAAwCsC,EAAK5B,GAA7C,KAAoD,CAACgF,SAAUpD,IAAOZ,MAAK,WACvEiE,IAAMC,QAAQ,6BACdnD,EAAO3B,KAAK8C,aACb3B,OAAM,SAACC,GACNyD,IAAMzD,MAAM,sBACZC,QAAQD,MAAMA,GACdO,EAAO3B,KAAK8C,aGOPmC,CAAWlD,EAAUJ,GAC1BkB,KA8EiG4B,MAAM,UAA/F,UACK7C,EAAU,MAAO,SADtB,kBC7GVsD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,MAAO,CACHC,SAAU,SAIH,SAASC,IACpB,IAAMC,EAAUN,IACVO,EAAYC,YAAenF,GAC9BoB,EAASgE,YAAkBxF,GAC9B,EAAwB0B,IAAMC,UAAS,GAAvC,mBAAOL,EAAP,KAAamE,EAAb,KACA,EAAsC/D,IAAMC,SAASvC,EAAMsG,aAA3D,mBAAOC,EAAP,KAAoBC,EAApB,KAOA,IAAMC,EAAkB,WACtBJ,GAAQ,IAOV,OACI,eAACK,EAAA,EAAD,CAAKC,EAAG,EAAR,UACI,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACI,eAACC,EAAA,EAAD,CAAOC,UAAWf,EAAQH,MAAOmB,aAAW,eAA5C,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,uBACA,cAACA,EAAA,EAAD,wBACA,cAACA,EAAA,EAAD,yBAGR,cAACC,EAAA,EAAD,WACMnB,GAAa,IAAIxE,KAAI,SAACO,GACpB,OACI,eAACkF,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAWP,UAAU,KAAKS,MAAM,MAAhC,UACI,cAACC,EAAA,EAAD,CAAYtC,QAAS,kBJhB7D,SAAqBhD,EAAaG,GAC9BhB,IAAMoG,OAAN,UAAgB7H,EAAhB,yBAA2CsC,EAAK5B,GAAhD,MAAuDgB,MAAK,WACxDiE,IAAMC,QAAQ,6BACdnD,EAAO3B,KAAK8C,aACb3B,OAAM,SAACC,GACNyD,IAAMzD,MAAM,wBACZC,QAAQD,MAAMA,GACdO,EAAO3B,KAAK8C,aIS+CkE,CAAWxF,EAAMG,IAASsF,KAAK,QAAQxC,MAAM,UAAU+B,aAAW,OAA7F,SACI,cAAC,IAAD,MAEJ,cAACM,EAAA,EAAD,CAAYtC,QAAS,kBAjCzD,SAAkBhD,GACduE,EAAevE,GACfwE,IA+B2DkB,CAAS1F,IAAOyF,KAAK,QAAQxC,MAAM,UAAU+B,aAAW,OAAnF,SACI,cAAC,IAAD,SAGR,cAACG,EAAA,EAAD,UACOnF,EAAK7B,OAAS,cAACwH,EAAA,EAAD,CAAQC,IAAG,UAAK5F,EAAKhC,UAAV,YAAuBgC,EAAK/B,UAAY4H,IAAK7F,EAAK7B,SAAY,+BAE9F,eAACgH,EAAA,EAAD,WACKnF,EAAKhC,UADV,IACsBgC,EAAK/B,YAE3B,cAACkH,EAAA,EAAD,UACKnF,EAAK9B,UAhBC8B,EAAK5B,cAwBxC,cAAC,EAAD,CAAW4B,KAAMsE,EAAarE,KAAMA,EAAMC,YA3C9B,WAClBkE,GAAQ,IA0CkEjE,OAAQA,EAAQC,SAAS,OCxE1F,SAAS0F,IACpB,MAAwBzF,IAAMC,UAAS,GAAvC,mBAAOL,EAAP,KAAamE,EAAb,KACGjE,EAASgE,YAAkBxF,GAU9B,OACI,eAAC8F,EAAA,EAAD,CAAKC,EAAG,EAAGK,UAAU,cAArB,UACI,cAAChC,EAAA,EAAD,CAAQgD,QAAQ,WAAW9C,MAAM,UAAUD,QAV3B,WACtBoB,GAAQ,IASF,sBAGA,cAAC,EAAD,CAAWpE,KAAMjC,EAAMsG,YAAapE,KAAMA,EAAMC,YATpC,WAClBkE,GAAQ,IAQwEjE,OAAQA,EAAQC,SAAS,O,8BCjBzGsD,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCoC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAavC,EAAMwC,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,OAIH,SAASK,KACtB,IAAMtC,EAAUN,IACVvD,EAASgE,YAAkBxF,GAEjC,OACE,qBAAKoG,UAAWf,EAAQgC,KAAxB,SACI,cAACO,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAYX,QAAQ,KAAKhB,UAAWf,EAAQqC,MAA5C,uCAGA,cAACtD,EAAA,EAAD,CAAQE,MAAM,UAAUD,QAAS,kBNtBjD,SAAuB7C,GACnBhB,IAAMF,IAAN,UAAavB,EAAb,oBAA0C0B,MAAK,WAC3CiE,IAAMC,QAAQ,gCACdnD,EAAO3B,KAAK8C,aACb3B,OAAM,SAACC,GACNyD,IAAMzD,MAAM,uBACZC,QAAQD,MAAMA,GACdO,EAAO3B,KAAK8C,aMemCqF,CAAaxG,IAApD,kC,OCRDyG,OAbf,WACI,OACI,eAAC,IAAD,WACI,cAAC,GAAD,IACA,eAAC,IAAMC,SAAP,CAAgBC,SAAU,6CAA1B,UACI,cAAChB,EAAD,IACA,cAAC/B,EAAD,IACA,cAAC,IAAD,WCXhBgD,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.5ee12ff5.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport Users from '../models/Users';\r\nimport {\r\n    SetterOrUpdater\r\n} from 'recoil';\r\nimport { toast } from 'react-toastify';\r\nconst baseAPIURL = `${window.location.protocol}//${window.location.hostname}:3001/api`;\r\n\r\nfunction refreshUsers (reload: SetterOrUpdater<number>) {\r\n    axios.get(`${baseAPIURL}/users/refresh/`).then(() => {\r\n        toast.success('Users refreshed successfully');\r\n        reload(Math.random());\r\n    }).catch((error) => {\r\n        toast.error('User refresh failed');\r\n        console.error(error);\r\n        reload(Math.random());\r\n    });\r\n}\r\n\r\nfunction addUser (user: any, reload: SetterOrUpdater<number>) {\r\n    axios.post(`${baseAPIURL}/users/new/`, {userData: user}).then(() => {\r\n        toast.success('User added successfully');\r\n        reload(Math.random());\r\n    }).catch((error) => {\r\n        toast.error('User addition failed');\r\n        console.error(error);\r\n        reload(Math.random());\r\n    });\r\n}\r\n\r\nfunction updateUser (user: any, reload: SetterOrUpdater<number>) {\r\n    axios.put(`${baseAPIURL}/users/update/${user.id}/`, {userData: user}).then(() => {\r\n        toast.success('User updated successfully');\r\n        reload(Math.random());\r\n    }).catch((error) => {\r\n        toast.error('User update failed');\r\n        console.error(error);\r\n        reload(Math.random());\r\n    });\r\n}\r\n\r\nfunction deleteUser (user: Users, reload: SetterOrUpdater<number>) {\r\n    axios.delete(`${baseAPIURL}/users/delete/${user.id}/`).then(() => {\r\n        toast.success('User deleted successfully');\r\n        reload(Math.random());\r\n    }).catch((error) => {\r\n        toast.error('User deletion failed');\r\n        console.error(error);\r\n        reload(Math.random());\r\n    });\r\n}\r\n\r\nexport { refreshUsers, addUser, updateUser, deleteUser };","export default class Users {\r\n    static _latestID: number = 1;\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    avatar: string;\r\n  \r\n    constructor (firstName: string, lastName: string, email: string, avatar: string, id: number) {\r\n        this.id = id;\r\n        this.firstName = firstName;\r\n        this.lastName = lastName;\r\n        this.email = email;\r\n        this.avatar = avatar;\r\n        this.updateLatestID();\r\n    }\r\n\r\n    updateLatestID() {\r\n        Users._latestID = Math.max(this.id, Users._latestID);\r\n    }\r\n\r\n    static incrementID() {\r\n        return Users._latestID + 1;\r\n    }\r\n\r\n    static emptyUser() {\r\n        return new Users('', '', '', '', this.incrementID());\r\n    }\r\n}\r\n","import {\r\n    selector,\r\n    atom\r\n} from 'recoil';\r\nimport axios from 'axios';\r\nimport Users from '../models/Users';\r\nconst baseAPIURL = `${window.location.protocol}//${window.location.hostname}:3001/api`;\r\n\r\nconst ForceReload = atom({\r\n\tkey: 'forcereload',\r\n\tdefault: 0\r\n});\r\n\r\nconst UserSelector = selector({\r\n    key: 'users',\r\n    get: async ({ get }) => {\r\n        get(ForceReload);\r\n        return axios.get(baseAPIURL + '/users/get/').then((response: any) => {\r\n            return Object.entries(response.data).map((entry: any) => new Users(\r\n                entry[1].firstName,\r\n                entry[1].lastName,\r\n                entry[1].email,\r\n                entry[1].avatar,\r\n                entry[1].id\r\n            ));\r\n        }).catch((error) => {\r\n            console.log(error);\r\n        });\r\n    },\r\n});\r\n\r\nexport { ForceReload, UserSelector };","import Users from \"../models/Users\";\r\nimport { Button, Dialog, DialogTitle, DialogContent, DialogContentText, TextField, DialogActions } from '@material-ui/core';\r\nimport React from \"react\";\r\nimport { SetterOrUpdater } from \"recoil\";\r\nimport { addUser, updateUser } from \"../util/apiConnection\";\r\n\r\ninterface UserProps {\r\n    user: Users;\r\n    open: boolean;\r\n    handleClose: () => void;\r\n    reload: SetterOrUpdater<number>;\r\n    newUser: boolean;\r\n}\r\n\r\nconst UserModal: React.FC<UserProps> = ({user, open, handleClose, reload, newUser}) => {\r\n    const [formData, setFormData] = React.useState({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, avatar: user.avatar});\r\n    const [firstNameValid, validFirstName] = React.useState(!newUser);\r\n    const [lastNameValid, validLastName] = React.useState(!newUser);\r\n    const [emailValid, validEmail] = React.useState(!newUser);\r\n    const [firstNameTouched, touchFirstName] = React.useState(!newUser);\r\n    const [lastNameTouched, touchLastName] = React.useState(!newUser);\r\n    const [emailTouched, touchEmail] = React.useState(!newUser);\r\n\r\n    function firstNameChange (e: React.ChangeEvent<HTMLInputElement>) {\r\n        setFormData({...formData, firstName: e.target.value});\r\n        validFirstName(!!e.target.value);\r\n    }\r\n\r\n    function lastNameChange (e: React.ChangeEvent<HTMLInputElement>) {\r\n        setFormData({...formData, lastName: e.target.value});\r\n        validLastName(!!e.target.value);\r\n    }\r\n\r\n    function emailChange (e: React.ChangeEvent<HTMLInputElement>) {\r\n        setFormData({...formData, email: e.target.value});\r\n        validEmail(!!e.target.value && e.target.value.indexOf('@') > 0);\r\n    }\r\n\r\n    function avatarChange (e: React.ChangeEvent<HTMLInputElement>) {\r\n        setFormData({...formData, avatar: e.target.value});\r\n    }\r\n\r\n    function submitUser() {\r\n        if (newUser) addUser(formData, reload);\r\n        else updateUser(formData, reload);\r\n        closeDialog();\r\n    }\r\n\r\n    function updateState() {\r\n        setFormData({id: user.id, firstName: user.firstName, lastName: user.lastName, email: user.email, avatar: user.avatar});\r\n    }\r\n\r\n    function closeDialog () {\r\n        validFirstName(!newUser);\r\n        validLastName(!newUser);\r\n        validEmail(!newUser);\r\n        touchFirstName(!newUser);\r\n        touchLastName(!newUser);\r\n        touchEmail(!newUser);\r\n        reload(Math.random());\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onRendered={updateState} onClose={closeDialog} aria-labelledby=\"form-dialog-title\">\r\n            <DialogTitle id=\"form-dialog-title\">{newUser ? 'Add a user': 'Update user'}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    Fill out the form below to {newUser ? 'add a user to': 'update the user in'} the user cache.\r\n                </DialogContentText>\r\n                <form autoComplete=\"off\">\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        id=\"firstName\"\r\n                        label=\"First Name\"\r\n                        defaultValue={user.firstName}\r\n                        onChange={firstNameChange}\r\n                        onFocus={() => touchFirstName(true)}\r\n                        error={!firstNameValid && firstNameTouched}\r\n                        helperText=\"A first name is required\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"lastName\"\r\n                        label=\"Last Name\"\r\n                        defaultValue={user.lastName}\r\n                        onChange={lastNameChange}\r\n                        onFocus={() => touchLastName(true)}\r\n                        error={!lastNameValid && lastNameTouched}\r\n                        helperText=\"A last name is required\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        type=\"email\"\r\n                        defaultValue={user.email}\r\n                        onChange={emailChange}\r\n                        onFocus={() => touchEmail(true)}\r\n                        error={!emailValid && emailTouched}\r\n                        helperText=\"An email address is required\"\r\n                        fullWidth\r\n                        required\r\n                    />\r\n                    <TextField\r\n                        margin=\"dense\"\r\n                        id=\"avatar\"\r\n                        label=\"Avatar Image URL\"\r\n                        defaultValue={user.avatar}\r\n                        onChange={avatarChange}\r\n                        fullWidth\r\n                    />\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={closeDialog} color=\"primary\">\r\n                    Cancel\r\n                </Button>\r\n                <Button disabled={!(firstNameValid && lastNameValid && emailValid)} onClick={submitUser} color=\"primary\">\r\n                    {newUser ? 'Add': 'Update'} User\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default UserModal;","import React from 'react';\r\nimport {\r\n    useRecoilValue,\r\n    useSetRecoilState\r\n} from 'recoil';\r\nimport { deleteUser } from '../util/apiConnection';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, IconButton, Box, Avatar } from '@material-ui/core';\r\nimport Delete from '@material-ui/icons/Delete';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport Users from '../models/Users';\r\nimport { ForceReload, UserSelector } from '../util/tableState';\r\nimport UserModal from './UserModal';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n}));\r\n\r\nexport default function UserList () {\r\n    const classes = useStyles();\r\n    const usersData = useRecoilValue(UserSelector);\r\n\tconst reload = useSetRecoilState(ForceReload);\r\n    const [open, setOpen] = React.useState(false);\r\n    const [currentUser, setCurrentUser] = React.useState(Users.emptyUser());\r\n\r\n    function editUser(user: Users) {\r\n        setCurrentUser(user);\r\n        handleClickOpen();\r\n    }\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Box m={3}>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell></TableCell>\r\n                            <TableCell>Portrait</TableCell>\r\n                            <TableCell>User Name</TableCell>\r\n                            <TableCell>Email</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {(usersData || []).map((user: Users) => {\r\n                            return (\r\n                                <TableRow key={user.id}>\r\n                                    <TableCell component=\"th\" scope=\"row\">\r\n                                        <IconButton onClick={() => deleteUser(user, reload)} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                            <Delete />\r\n                                        </IconButton>\r\n                                        <IconButton onClick={() => editUser(user)} edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                                            <Edit />\r\n                                        </IconButton>\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {!!user.avatar ? <Avatar alt={`${user.firstName} ${user.lastName}`} src={user.avatar} />: <></>}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {user.firstName} {user.lastName}\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {user.email}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n            <UserModal user={currentUser} open={open} handleClose={handleClose} reload={reload} newUser={false} />\r\n        </Box>\r\n    );\r\n};","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport UserModal from './UserModal';\r\nimport Users from '../models/Users';\r\nimport { ForceReload } from '../util/tableState';\r\nimport { useSetRecoilState } from 'recoil';\r\n\r\nexport default function AddUser() {\r\n    const [open, setOpen] = React.useState(false);\r\n\tconst reload = useSetRecoilState(ForceReload);\r\n  \r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <Box m={3} className=\"right-align\">\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                Add User\r\n            </Button>\r\n            <UserModal user={Users.emptyUser()} open={open} handleClose={handleClose} reload={reload} newUser={true} />\r\n        </Box>\r\n    );\r\n}","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { AppBar, Toolbar, Typography, Button } from '@material-ui/core';\r\nimport { refreshUsers } from '../util/apiConnection';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { ForceReload } from '../util/tableState';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n  const reload = useSetRecoilState(ForceReload);\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    RedSky User Cache Project\r\n                </Typography>\r\n                <Button color=\"inherit\" onClick={() => refreshUsers(reload)}>Refresh Users</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n  );\r\n}","import './App.css';\nimport React from 'react';\nimport { RecoilRoot } from 'recoil';\nimport UserList from './components/UserList';\nimport AddUser from './components/AddUser';\nimport MainAppBar from './components/MainAppBar';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n    return (\n        <RecoilRoot>\n            <MainAppBar />\n            <React.Suspense fallback={<div>Loading...</div>}>\n                <AddUser />\n                <UserList />\n                <ToastContainer />\n            </React.Suspense>\n        </RecoilRoot>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}